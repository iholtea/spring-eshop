plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.hidetake.swagger.generator' version '2.19.2' 
}

group = 'io.ionuth'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

swaggerSources {
	eStore {
	    
	    // more complex API definition
	    def apiLocation = "${rootDir}/src/main/resources/api/openapi.yaml"
		def configLocation = "${rootDir}/src/main/resources/api/config.json"
		
		// simple hello API definition
		//def apiLocation = "${rootDir}/src/main/resources/api/openapi-hello.yaml"
		//def configLocation = "${rootDir}/src/main/resources/api/config-hello.json"
		
		def ignoreLocation = "${rootDir}/src/main/resources/api/openapi-generator-ignore"
		
		inputFile = file(apiLocation)
    	code {
    		language = 'spring'
    		outputDir = file("${rootDir}/src-gen")
    		configFile = file(configLocation)
    		rawOptions = ['--ignore-file-override', file(ignoreLocation) ] as List<String>
      		components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
      		jvmArgs = ['--add-opens=java.base/java.util=ALL-UNNAMED']
    	}
	}
}

sourceSets.main.java.srcDir "${rootDir}/src-gen/src/main/java"

dependencies {
	
	// OpenAPI starts
	// the actual swagger code generation project
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'
	// @API annotation generated - probably for documentation purpose
	compileOnly 'io.swagger:swagger-annotations:1.6.2'
	// XML annotation on the model bean classes like @JsonProperty("id") or @XmlRootElement(name = "Customer")
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1' 
    // OpenAPI ends
    
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}
